library(tidyverse)
library(lubridate)
data(iris)
data(car)
?data
iris
str(iris)
summary(iris)
ggplot() +
geom_histogram(data = iris, aes(Sepal.Width), bins = 20)
ggplot() +
geom_point(data = iris, aes(Sepal.Length, Sepal.Width))
pairs(iris[,1:4])
?pairs
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(iris[,1:4], upper.panel = panel.cor, lower.panel = panel.smooth)
table(iris$Species)
ggplot() +
geom_boxplot(data = iris, aes(Species, Sepal.Length))
ggplot() +
geom_boxplot(data = iris, aes(Species, Sepal.Length, color=Sepal.Length))
ggplot() +
geom_boxplot(data = iris, aes(Species, Sepal.Length, color=Species))
ggplot() +
geom_density(data = iris, aes(Sepal.Length))
ggplot() +
geom_density(data = iris, aes(Sepal.Length, fill=Species))
ggplot() +
geom_density(data = iris, aes(Sepal.Length, fill=Species)) +
facet_wrap(~Species)
?facet_wrap
ggplot() +
geom_density(data = iris, aes(Sepal.Length, fill=Species)) +
facet_wrap(~Species, ncol = 1)
ggplot() +           # histogram
geom_histogram(data = iris, aes(Sepal.Width), bins = 20)
ggplot() +           # histogram
geom_histogram(data = iris, aes(Sepal.Width), bins = 10)
library(smbinning)
df <- iris
names(df) <- gsub('\\.','_',names(df))
df$Species <- ifelse(iris$Species == 'versicolor',1,0)
str(df)
df$Species <- as.factor(ifelse(iris$Species == 'versicolor',1,0))
str(df)
summary(df)
ggplot() +           # histogram
geom_histogram(data = df, aes(Sepal_Width), bins = 10)
ggplot() +           # scatter plot
geom_point(data = df, aes(Sepal_Length, Sepal_Width))
pairs(df[,1:4], upper.panel = panel.cor, lower.panel = panel.smooth)
table(df$Species)
ggplot() +           # box plot
geom_boxplot(data = df, aes(Species, Sepal_Length, color=Species))
ggplot() +           # density plot
geom_density(data = df, aes(Sepal_Length, fill=Species)) +
facet_wrap(~Species, ncol = 1)
result <- smbinning(df, 'Species', 'Sepal_Width')
result
df$Species <- as.numeric(df$Species)
result <- smbinning(df, 'Species', 'Sepal_Width')
result
df
str(df)
summary(df)
View(df)
df$Species <- as.numeric(df$Species) - 1
result <- smbinning(df, 'Species', 'Sepal_Width')
result
par(mfrow=c(2,2))
boxplot(df$Sepal_Width ~ df$Species,
horizontal=TRUE, frame=FALSE, col="lightgray",main="Distribution")
mtext("Credit Score",3)
smbinning.plot(result,option="dist",sub="Credit Score")
smbinning.plot(result,option="badrate",sub="Credit Score")
smbinning.plot(result,option="WoE",sub="Credit Score")
par(mfrow=c(1,1))
quantile(df$Sepal_Width)
result$cuts
cut(df$Sepal_Width, result$cuts)
c(0,result$cuts,max(df$Sepal_Width)
)
cut(df$Sepal_Width, c(0,result$cuts,max(df$Sepal_Width)))
result$col_id
result$ivtable
result$bands
result$x
?smbinning
result$iv
cut(df$Sepal_Width, result$bands)
df[61,]
cut(df$Sepal_Width, c(0,result$cuts,max(df$Sepal_Width)))
cut(df$Sepal_Width, c(0,result$cuts,max(df$Sepal_Width)),
labels = c('1','2','3'))
df$Sepal_Width_level <- cut(df$Sepal_Width, c(0,result$cuts,max(df$Sepal_Width)),
labels = c('1','2','3'))
min_max <- function(x) {(x-min(x)) / (max(x)-min(x))}
apply(df[,1:4], 2, min_max)
apply(df[,1:4], 2, scale)
data("iris")
df <- iris
names(df) <- gsub('\\.','_',names(df))
df$Species <- ifelse(iris$Species == 'versicolor',1,0)
library(tidyverse)
library(lubridate)
library(caret)
library(gmodels)
model_logit <- glm(Species ~ .,
data = df,
family = 'binomial')
summary(model_logit)
library(ROCR)
opt.cut = function(perf, pred){
cut.ind = mapply(FUN=function(x, y, p){
d = (x - 0)^2 + (y-1)^2
ind = which(d == min(d))
c(sensitivity = y[[ind]], specificity = 1-x[[ind]],
cutoff = p[[ind]])
}, perf@x.values, perf@y.values, pred@cutoffs)
}
plot_roc <- function(pred, label) {
roc <- data.frame(labels = label,predictions = pred)
pred <- prediction(roc$predictions,roc$labels)
roc.perf <- performance(pred,measure = "tpr", x.measure = "fpr")
plot(roc.perf)
abline(a=0,b=1)
print(opt.cut(roc.perf,pred))
# calculate auc
auc.perf <- performance(pred,measure = "auc")
auc.perf@y.values
}
plot_roc(model_logit$fitted.values, df$Species)
plot_roc <- function(pred, label) {
roc <- data.frame(labels = label,predictions = pred)
pred <- prediction(roc$predictions,roc$labels)
roc.perf <- performance(pred,measure = "tpr", x.measure = "fpr")
plot(roc.perf)
abline(a=0,b=1)
print(opt.cut(roc.perf,pred))
# calculate auc
auc.perf <- performance(pred,measure = "auc")
print('AUC:',auc.perf@y.values[[1]][1])
}
plot_roc(model_logit$fitted.values, df$Species)
plot_roc <- function(pred, label) {
roc <- data.frame(labels = label,predictions = pred)
pred <- prediction(roc$predictions,roc$labels)
roc.perf <- performance(pred,measure = "tpr", x.measure = "fpr")
plot(roc.perf)
abline(a=0,b=1)
print(opt.cut(roc.perf,pred))
# calculate auc
auc.perf <- performance(pred,measure = "auc")
print(auc.perf@y.values[[1]][1])
}
plot_roc(model_logit$fitted.values, df$Species)
print(auc.perf@y.values[[1]])
plot_roc <- function(pred, label) {
roc <- data.frame(labels = label,predictions = pred)
pred <- prediction(roc$predictions,roc$labels)
roc.perf <- performance(pred,measure = "tpr", x.measure = "fpr")
plot(roc.perf)
abline(a=0,b=1)
print(opt.cut(roc.perf,pred))
# calculate auc
auc.perf <- performance(pred,measure = "auc")
print(auc.perf@y.values[[1]])
}
plot_roc(model_logit$fitted.values, df$Species)
plot_roc <- function(pred, label) {
roc <- data.frame(labels = label,predictions = pred)
pred <- prediction(roc$predictions,roc$labels)
roc.perf <- performance(pred,measure = "tpr", x.measure = "fpr")
plot(roc.perf)
abline(a=0,b=1)
print(opt.cut(roc.perf,pred))
# calculate auc
auc.perf <- performance(pred,measure = "auc")
print(paste0('AUC:',auc.perf@y.values[[1]]))
}
plot_roc(model_logit$fitted.values, df$Species)
?mapply
library(rpart)
library(rpart.plot)
model_dtree <- rpart(Species ~ ., data = df, method = 'class')
rpart.plot(model_dtree,branch=1,type=2, fallen.leaves=T,cex=0.8, sub="剪枝前")
model_dtree <- prune(model_dtree,
cp=model_dtree$cptable[which.min(model_dtree$cptable[,"xerror"]),"CP"])
rpart.plot(model_dtree,branch=1,type=4, fallen.leaves=T,cex=0.8, sub="剪枝后")
pred <- predict(model_dtree, df[,1:4])
plot_roc(pred, df$Species)
library(randomForest)
?performance
library(xgboost)
model_xgboost <- xgboost(data = as.matrix(df[,1:4]), label = df[,5],
max.depth = 2, eta = 1, nround = 3,
objective = "binary:logistic")
pred <- predict(model_xgboost, as.matrix(df[,1:4]))
plot_roc <- function(pred, label) {
pred <- prediction(pred, label)
roc.perf <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(roc.perf)
abline(a=0,b=1)
print(opt.cut(roc.perf,pred))
# calculate auc
auc.perf <- performance(pred,measure = "auc")
print(paste0('AUC:',auc.perf@y.values[[1]]))
}
plot_roc(model_logit$fitted.values, df$Species)
'a/nb'
'a\nb'
print('a\nb')
print('a/nb')
f1_score <- function(pred, label) {
pred <- prediction(pred, label)
prec <- performance(pred, measure = 'prec')
rec <- performance(pred, measure = 'rec')
f1 <- 2*prec*rec / (prec+rec)
print(paste0('precision:',prec))
print(paste0('recall:',rec))
print(paste0('F1 score:',f1))
}
f1_score(pred, df$Species)
pred <- predict(model_dtree, df[,1:4])
f1_score(pred, df$Species)
pred <- prediction(pred, df$Species)
View(pred)
plot_roc(pred, df$Species)
pred <- predict(model_dtree, df[,1:4])
View(pred)
pred <- predict(model_dtree, df[,1:4])[,1]
plot_roc(pred, df$Species)
pred <- predict(model_dtree, df[,1:4])[,2]
plot_roc(pred, df$Species)
model_rf$confusion
library(randomForest)
model_rf <- randomForest(as.factor(Species) ~ ., data = df,
ntree = 50, importance = TRUE)
model_rf$confusion
model_rf$predicted
f1_score(model_rf$predicted, df$Species)
pred <- prediction(model_rf$predicted, df$Species)
?prediction
confusionMatrix(cbind(model_rf$predicted, df$Species))
?confusionMatrix
confusionMatrix(model_rf$predicted, reference = df$Species)
f1_score(as.factor(model_rf$predicted), df$Species)
f1_score(model_logit$fitted.values, df$Species)
pred <- prediction(model_logit$fitted.values, df$Species)
prec <- performance(pred, measure = 'prec')
rm(f1_score())
rm(f1_score
)
predict(model_rf, df[,1:4])
pred <- model_rf$predicted
pred==1
label <- df$Species
label[pred==1]
label[pred==1]==1
sum(label[pred==1]==1)
sum(label[pred==1]==1)/sum(pred==1)
f1_score <- function(pred, label) {
prec <- sum(label[pred==1]==1) / sum(pred==1)
rec <- sum(pred[label==1]==1) / sum(label==1)
f1 <- 2*prec*rec / (prec+rec)
print(paste0('precision:',prec))
print(paste0('recall:',rec))
print(paste0('F1 score:',f1))
}
f1_score(model_rf$predicted, df$Species)
pred <- predict(model_xgboost, as.matrix(df[,1:4]))
plot_roc(pred, df$Species)
library(gbm)
model_gbdt <- train(as.factor(Species) ~ .,
data = df, method = "gbm",
trControl = fitControl)
fitControl <- trainControl(method = "repeatedcv",
number = 5, repeats = 2, search = "random")
model_gbdt <- train(as.factor(Species) ~ .,
data = df, method = "gbm",
trControl = fitControl)
print(model_gbdt)
model_gbdt$pred
model_gbdt$results
predict(model_gbdt, df[,1:4])
pred <- predict(model_gbdt, df[,1:4])
f1_score(pred, df$Species)
